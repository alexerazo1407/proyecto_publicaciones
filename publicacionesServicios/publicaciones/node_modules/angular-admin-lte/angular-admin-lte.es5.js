import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Injectable, InjectionToken, Input, NgModule, NgZone, Optional, Output, Renderer2, SkipSelf, ViewChild, ViewChildren, ViewContainerRef, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NavigationEnd, NavigationStart, PRIMARY_OUTLET, Router, RouterModule } from '@angular/router';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { Title } from '@angular/platform-browser';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/pluck';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
var RoutingService = (function () {
    /**
     * \@method constructor
     * @param {?} router
     */
    function RoutingService(router$$1) {
        this.router = router$$1;
        this.onChange = new BehaviorSubject$1(undefined);
        this.events = new BehaviorSubject$1(undefined);
        this.init();
    }
    /**
     * [init description]
     * \@method init
     * @return {?}
     */
    RoutingService.prototype.init = function () {
        var _this = this;
        this.router.events.subscribe(function (routeEvent) {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            _this.events.next(routeEvent);
            if (routeEvent instanceof NavigationEnd) {
                var /** @type {?} */ route = _this.router.routerState.root.snapshot, /** @type {?} */ tmpUrl = '', /** @type {?} */ url = '', /** @type {?} */ paths = [], /** @type {?} */ rootRoot = true;
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = "/" + _this.createUrl(route);
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (var /** @type {?} */ key in route.params) {
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(":" + key, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(_this.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(_this.createBreadcrumb(route, url));
                    }
                }
                _this.onChange.next(paths);
            }
        });
    };
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @param {?} route
     * @param {?} url
     * @return {?}
     */
    RoutingService.prototype.createBreadcrumb = function (route, url) {
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            var /** @type {?} */ isUrl = true;
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !this.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    };
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @param {?} route
     * @return {?}
     */
    RoutingService.prototype.isChildrenSelfRoute = function (route) {
        var /** @type {?} */ children = route.routeConfig.children;
        for (var /** @type {?} */ index in children) {
            if (children[index].path === '' && (children[index].component || children[index].loadChildren)) {
                return true;
            }
        }
    };
    /**
     * [createUrl description]
     * \@method createUrl
     * @param {?} route
     * @return {?}
     */
    RoutingService.prototype.createUrl = function (route) {
        return route.url.map(function (urlSegment) { return urlSegment.toString(); }).join('/');
    };
    return RoutingService;
}());
RoutingService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
RoutingService.ctorParameters = function () { return [
    { type: Router, },
]; };
var BreadcrumbsComponent = (function () {
    /**
     * \@method constructor
     * @param {?} routingService
     * @param {?} changeDetectorRef
     */
    function BreadcrumbsComponent(routingService, changeDetectorRef) {
        this.routingService = routingService;
        this.changeDetectorRef = changeDetectorRef;
        this.homeIcon = 'fa fa-home';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.routingService.onChange.subscribe(function (value) {
            _this.breadcrumbs = value;
        });
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return BreadcrumbsComponent;
}());
BreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-breadcrumbs',
                template: "\n    <ol class=\"breadcrumb\">\n      <li *ngFor=\"let breadcrumb of breadcrumbs; let first = first; let last = last\" [class.active]=\"last || !breadcrumb.url\">\n        <a *ngIf=\"breadcrumb.url\" [routerLink]=\"breadcrumb.url\">\n          <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n          <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n          <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n        </a>\n        <ng-template [ngIf]=\"!breadcrumb.url\">\n          <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n          <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n          <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n        </ng-template>\n      </li>\n    </ol>\n  ",
                styles: ["\n    .breadcrumb {\n      float: right;\n      background: transparent;\n      margin-top: 0;\n      margin-bottom: 0;\n      font-size: 12px;\n      padding: 7px 5px;\n      position: absolute;\n      top: 15px;\n      right: 10px;\n      border-radius: 2px;\n    }\n\n    .breadcrumb > li > a {\n      color: #444;\n      text-decoration: none;\n      display: inline-block;\n    }\n\n    .breadcrumb > li > a > .fa,\n    .breadcrumb > li > a > .glyphicon,\n    .breadcrumb > li > a > .ion {\n      margin-right: 5px;\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
BreadcrumbsComponent.ctorParameters = function () { return [
    { type: RoutingService, },
    { type: ChangeDetectorRef, },
]; };
BreadcrumbsComponent.propDecorators = {
    'homeIcon': [{ type: Input },],
};
var BreadcrumbsModule = (function () {
    function BreadcrumbsModule() {
    }
    return BreadcrumbsModule;
}());
BreadcrumbsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                exports: [BreadcrumbsComponent],
                declarations: [BreadcrumbsComponent]
            },] },
];
/**
 * @nocollapse
 */
BreadcrumbsModule.ctorParameters = function () { return []; };
var LayoutStore = (function () {
    /**
     * \@method constructor
     * @param {?} layoutConfig
     */
    function LayoutStore(layoutConfig) {
        this.initialLayoutState = {
            isSidebarLeftCollapsed: false,
            isSidebarLeftExpandOnOver: false,
            isSidebarLeftMouseOver: false,
            isSidebarLeftMini: true,
            sidebarRightSkin: 'dark',
            isSidebarRightCollapsed: true,
            isSidebarRightOverContent: true,
            layout: 'normal',
            sidebarLeftMenu: [],
            skin: 'blue',
        };
        if (layoutConfig) {
            this.initialLayoutState = Object.assign(this.initialLayoutState, layoutConfig);
        }
        this._layoutState = new BehaviorSubject$1(this.initialLayoutState);
        this.layoutState = this._layoutState.asObservable();
    }
    Object.defineProperty(LayoutStore.prototype, "windowInnerHeight", {
        /**
         * [windowInnerHeight description]
         * \@method windowInnerHeight
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('windowInnerHeight').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "windowInnerWidth", {
        /**
         * [windowInnerWidth description]
         * \@method windowInnerWidth
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('windowInnerWidth').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftCollapsed", {
        /**
         * [isSidebarLeftCollapsed description]
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarLeftCollapsed').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftExpandOnOver", {
        /**
         * [isSidebarLeftExpandOnOver description]
         * \@method isSidebarLeftExpandOnOver
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarLeftExpandOnOver').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMouseOver", {
        /**
         * [isSidebarLeftMouseOver description]
         * \@method isSidebarLeftMouseOver
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarLeftMouseOver').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMini", {
        /**
         * [isSidebarLeftMini description]
         * \@method isSidebarLeftMini
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarLeftMini').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarRightSkin", {
        /**
         * [sidebarRightSkin description]
         * \@method sidebarRightSkin
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('sidebarRightSkin').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightCollapsed", {
        /**
         * [isSidebarRightCollapsed description]
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarRightCollapsed').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightOverContent", {
        /**
         * [isSidebarRightOverContent description]
         * \@method isSidebarRightOverContent
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('isSidebarRightOverContent').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftMenu", {
        /**
         * [sidebarLeftMenu description]
         * \@method sidebarLeftMenu
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('sidebarLeftMenu').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftElementHeight", {
        /**
         * [sidebarLeftElementHeight description]
         * \@method sidebarLeftElementHeight
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('sidebarLeftElementHeight').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "layout", {
        /**
         * [layoutType description]
         * \@method layoutType
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('layout').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "skin", {
        /**
         * [skin description]
         * \@method skin
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('skin').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "wrapperClasses", {
        /**
         * [wrapperClasses description]
         * \@method wrapperClasses
         * @return {?}
         */
        get: function () {
            return (this.layoutState.pluck('wrapperClasses').distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [sidebarLeftCollapsed description]
     * \@method sidebarLeftCollapsed
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftCollapsed = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftCollapsed: value }));
    };
    /**
     * [sidebarLeftExpandOnOver description]
     * \@method sidebarLeftExpandOnOver
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftExpandOnOver = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftExpandOnOver: value }));
    };
    /**
     * [setSidebarLeftElementHeight description]
     * \@method setSidebarLeftElementHeight
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setSidebarLeftElementHeight = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftElementHeight: value }));
    };
    /**
     * [setSidebarRightSkin description]
     * \@method setSidebarRightSkin
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.setSidebarRightSkin = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarRightSkin: value }));
    };
    /**
     * [sidebarLeftMouseOver description]
     * \@method sidebarLeftMouseOver
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftMouseOver = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMouseOver: value }));
    };
    /**
     * [sidebarLeftMini description]
     * \@method sidebarLeftMini
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftMini = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMini: value }));
    };
    /**
     * [sidebarRightCollapsed description]
     * \@method sidebarRightCollapsed
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarRightCollapsed = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightCollapsed: value }));
    };
    /**
     * [sidebarRightOverContent description]
     * \@method sidebarRightOverContent
     * @param {?=} value
     * @return {?}
     */
    LayoutStore.prototype.sidebarRightOverContent = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightOverContent: value }));
    };
    /**
     * [setSidebarLeftMenu description]
     * \@method setSidebarLeftMenu
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setSidebarLeftMenu = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftMenu: value }));
    };
    /**
     * [setLayout description]
     * \@method setLayout
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setLayout = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { layout: value }));
    };
    /**
     * [setSkin description]
     * \@method setSkin
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setSkin = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { skin: value }));
    };
    /**
     * [setWrapperClasses description]
     * \@method setWrapperClasses
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setWrapperClasses = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { wrapperClasses: value }));
    };
    /**
     * [setWindowInnerHeight description]
     * \@method setWindowInnerHeight
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setWindowInnerHeight = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerHeight: value }));
    };
    /**
     * [setWindowInnerWidth description]
     * \@method setWindowInnerWidth
     * @param {?} value
     * @return {?}
     */
    LayoutStore.prototype.setWindowInnerWidth = function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerWidth: value }));
    };
    return LayoutStore;
}());
var SidebarRightService = (function () {
    function SidebarRightService() {
    }
    Object.defineProperty(SidebarRightService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * \@method offsetHeight
         * @return {?}
         */
        get: function () {
            return this.elementRef ? this.elementRef.nativeElement.offsetHeight : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidebarRightService.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * \@method scrollHeight
         * @return {?}
         */
        get: function () {
            return this.elementRef ? this.elementRef.nativeElement.scrollHeight : null;
        },
        enumerable: true,
        configurable: true
    });
    return SidebarRightService;
}());
SidebarRightService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SidebarRightService.ctorParameters = function () { return []; };
var HeaderService = (function () {
    function HeaderService() {
    }
    Object.defineProperty(HeaderService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * \@method offsetHeight
         * @return {?}
         */
        get: function () {
            return this.elementRef.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    return HeaderService;
}());
HeaderService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HeaderService.ctorParameters = function () { return []; };
var FooterService = (function () {
    function FooterService() {
    }
    Object.defineProperty(FooterService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * \@method offsetHeight
         * @return {?}
         */
        get: function () {
            return this.elementRef.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    return FooterService;
}());
FooterService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
FooterService.ctorParameters = function () { return []; };
/**
 * [throttle description]
 * \@method throttle
 * @param {?} callback
 * @param {?} delay
 * @return {?}
 */
function throttle(callback, delay) {
    var _this = this;
    var /** @type {?} */ timeout = null;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!timeout) {
            timeout = setTimeout(function () {
                callback.call.apply(callback, [_this].concat(args));
                timeout = null;
            }, delay);
        }
    };
}
/**
 * [removeSubscriptions description]
 * \@method removeSubscriptions
 * @param {?} subscriptions
 * @return {?}
 */
function removeSubscriptions(subscriptions) {
    if (subscriptions) {
        subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    }
    return [];
}
/**
 * [removeListeners description]
 * \@method removeListeners
 * @param {?} listeners
 * @return {?}
 */
function removeListeners(listeners) {
    if (listeners) {
        listeners.forEach(function (listener) {
            listener();
        });
    }
    return [];
}
var ContentComponent = (function () {
    /**
     * \@method constructor
     * @param {?} layoutStore
     * @param {?} routingService
     * @param {?} titleService
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     * @param {?} sidebarRightService
     * @param {?} headerService
     * @param {?} footerService
     * @param {?} router
     */
    function ContentComponent(layoutStore, routingService, titleService, elementRef, changeDetectorRef, sidebarRightService, headerService, footerService, router$$1) {
        this.layoutStore = layoutStore;
        this.routingService = routingService;
        this.titleService = titleService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.sidebarRightService = sidebarRightService;
        this.headerService = headerService;
        this.footerService = footerService;
        this.router = router$$1;
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.titleTag = this.titleService.getTitle();
        this.subscriptions.push(this.routingService.onChange.subscribe(function (value) {
            if (value && value[value.length - 1]) {
                _this.titleService.setTitle(_this.getTitle(value[value.length - 1].data['title']));
                _this.header = value[value.length - 1].data['title'];
                _this.description = value[value.length - 1].data['description'];
            }
            _this.changeDetectorRef.markForCheck();
        }));
        this.subscriptions.push(this.router.events.subscribe(function (routeEvent) {
            if (routeEvent instanceof NavigationStart) {
                _this.navigationEnd = false;
            }
            if (routeEvent instanceof NavigationEnd) {
                _this.navigationEnd = true;
                _this.setContentMinHeight();
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftElementHeight.subscribe(function (value) {
            _this.sidebarLeftHeight = value;
            _this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            _this.layout = value;
            _this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe(function (value) {
            _this.windowInnerHeight = value;
            _this.setContentMinHeight();
        }));
        this.heightStyle = this.windowInnerHeight;
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ContentComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    Object.defineProperty(ContentComponent.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * \@method scrollHeight
         * @return {?}
         */
        get: function () {
            return this.contentInnerElement.nativeElement.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [getTitle description]
     * \@method getTitle
     * @param {?} title
     * @return {?}
     */
    ContentComponent.prototype.getTitle = function (title) {
        return title ? title + " - " + this.titleTag : this.titleTag;
    };
    /**
     * [setMinHeight description]
     * \@method setMinHeight
     * @return {?}
     */
    ContentComponent.prototype.setContentMinHeight = function () {
        if (this.navigationEnd) {
            var /** @type {?} */ heightStyle = void 0, /** @type {?} */ headerFooterOffsetHeight = this.headerService.offsetHeight + this.footerService.offsetHeight;
            if (this.layout === 'fixed') {
                heightStyle = this.windowInnerHeight - this.footerService.offsetHeight;
            }
            else {
                var /** @type {?} */ sidebarRight = this.sidebarRightService.scrollHeight ? this.sidebarRightService.scrollHeight - this.headerService.offsetHeight : 0;
                heightStyle = Math.max(this.windowInnerHeight - headerFooterOffsetHeight, this.sidebarLeftHeight - this.headerService.offsetHeight, sidebarRight);
            }
            if (heightStyle && heightStyle !== this.heightStyle) {
                if (this.scrollHeight > heightStyle) {
                    heightStyle = null;
                }
                this.heightStyle = heightStyle;
                this.changeDetectorRef.detectChanges();
            }
        }
    };
    return ContentComponent;
}());
ContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-content',
                template: "\n    <div class=\"content-wrapper\" [style.min-height.px]=\"heightStyle\">\n      <div #contentInnerElement class=\"content-inner\">\n        <ng-content select=\"[mk-layout-content-before-header]\"></ng-content>\n        <section *ngIf=\"header || description\" class=\"content-header\">\n          <h1>\n            {{header}}\n            <small *ngIf=\"description\">{{description}}</small>\n          </h1>\n          <mk-breadcrumbs></mk-breadcrumbs>\n        </section>\n        <ng-content select=\"[mk-layout-content-after-header]\"></ng-content>\n        <section class=\"content\">\n          <ng-content></ng-content>\n        </section>\n      </div>\n    </div>\n  ",
                styles: ["\n    :host {\n      display: block;\n    }\n\n    .content-wrapper {\n         position: relative;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
ContentComponent.ctorParameters = function () { return [
    { type: LayoutStore, },
    { type: RoutingService, },
    { type: Title, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: SidebarRightService, },
    { type: HeaderService, },
    { type: FooterService, },
    { type: Router, },
]; };
ContentComponent.propDecorators = {
    'contentInnerElement': [{ type: ViewChild, args: ['contentInnerElement',] },],
};
var ContentModule = (function () {
    function ContentModule() {
    }
    return ContentModule;
}());
ContentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, BreadcrumbsModule],
                exports: [ContentComponent],
                declarations: [ContentComponent]
            },] },
];
/**
 * @nocollapse
 */
ContentModule.ctorParameters = function () { return []; };
/**
 * Footer Left
 */
var FooterLeftComponent = (function () {
    function FooterLeftComponent() {
    }
    return FooterLeftComponent;
}());
FooterLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer-left',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
FooterLeftComponent.ctorParameters = function () { return []; };
FooterLeftComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
/**
 * Footer Right
 */
var FooterRightComponent = (function () {
    function FooterRightComponent() {
    }
    return FooterRightComponent;
}());
FooterRightComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer-right',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
FooterRightComponent.ctorParameters = function () { return []; };
FooterRightComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var FooterComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} footerService
     */
    function FooterComponent(elementRef, footerService) {
        this.elementRef = elementRef;
        this.footerService = footerService;
    }
    /**
     * @return {?}
     */
    FooterComponent.prototype.ngOnInit = function () {
        this.footerService.elementRef = this.elementRef;
    };
    return FooterComponent;
}());
FooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer',
                template: "\n    <footer class=\"main-footer\">\n      <div class=\"pull-right hidden-xs\">\n        <ng-template [ngTemplateOutlet]=\"footerRightComponent?.templateRef\"></ng-template>\n      </div>\n      <ng-template [ngTemplateOutlet]=\"footerLeftComponent?.templateRef\"></ng-template>\n    </footer>\n  ",
                styles: ["\n    :host {\n      display: block;\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
FooterComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: FooterService, },
]; };
FooterComponent.propDecorators = {
    'footerLeftComponent': [{ type: ContentChild, args: [FooterLeftComponent,] },],
    'footerRightComponent': [{ type: ContentChild, args: [FooterRightComponent,] },],
};
var FooterModule = (function () {
    function FooterModule() {
    }
    return FooterModule;
}());
FooterModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FooterComponent, FooterLeftComponent, FooterRightComponent],
                declarations: [FooterComponent, FooterLeftComponent, FooterRightComponent]
            },] },
];
/**
 * @nocollapse
 */
FooterModule.ctorParameters = function () { return []; };
/**
 * Header Logo
 */
var HeaderLogoComponent = (function () {
    function HeaderLogoComponent() {
    }
    return HeaderLogoComponent;
}());
HeaderLogoComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header-logo',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
HeaderLogoComponent.ctorParameters = function () { return []; };
HeaderLogoComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
/**
 * Header Logo Mini
 */
var HeaderLogoMiniComponent = (function () {
    function HeaderLogoMiniComponent() {
    }
    return HeaderLogoMiniComponent;
}());
HeaderLogoMiniComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header-logo-mini',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
HeaderLogoMiniComponent.ctorParameters = function () { return []; };
HeaderLogoMiniComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
/**
 * Header
 */
var HeaderComponent = (function () {
    /**
     * \@method constructor
     * @param {?} layoutStore
     * @param {?} ngZone
     * @param {?} renderer2
     * @param {?} elementRef
     * @param {?} headerService
     */
    function HeaderComponent(layoutStore, ngZone, renderer2, elementRef, headerService) {
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.headerService = headerService;
        this.listeners = [];
        this.subscriptions = [];
        this.isSidebarLeftToggle = true;
        this.isSidebarRightToggle = true;
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    HeaderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.headerService.elementRef = this.headerElement;
        if (this.sidebarLeftToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe(function (value) {
                _this.isSidebarLeftCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarLeftToggleElement.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarLeftCollapsed(!_this.isSidebarLeftCollapsed);
                }));
            });
        }
        if (this.sidebarRightToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(function (value) {
                _this.isSidebarRightCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarRightToggleElement.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarRightCollapsed(!_this.isSidebarRightCollapsed);
                }));
            });
        }
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    HeaderComponent.prototype.ngOnDestroy = function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    return HeaderComponent;
}());
HeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header',
                template: "\n    <header #headerElement class=\"main-header\">\n      <a href=\"/\" class=\"logo\">\n        <span class=\"logo-mini\"><ng-template [ngTemplateOutlet]=\"headerLogoMiniComponent?.templateRef\"></ng-template></span>\n        <span class=\"logo-lg\"><ng-template [ngTemplateOutlet]=\"headerLogoComponent?.templateRef\"></ng-template></span>\n      </a>\n      <nav *ngIf=\"isSidebarLeftToggle\" class=\"navbar navbar-static-top\">\n        <a #sidebarLeftToggleElement href=\"#\" class=\"sidebar-toggle\">\n          <span class=\"sr-only\">Toggle navigation</span>\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n        </a>\n        <div *ngIf=\"isSidebarRightToggle\" class=\"sidebar-right-toggle\">\n          <a #sidebarRightToggleElement href=\"#\"><i class=\"fa fa-gears\"></i></a>\n        </div>\n        <ng-content></ng-content>\n      </nav>\n    </header>\n  ",
                styles: ["\n    :host {\n      display: block;\n    }\n\n    .sidebar-right-toggle {\n      float: right;\n    }\n\n    .sidebar-right-toggle a {\n      padding: 15px;\n      display: block;\n      line-height: 20px;\n      cursor: pointer;\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
HeaderComponent.ctorParameters = function () { return [
    { type: LayoutStore, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: ElementRef, },
    { type: HeaderService, },
]; };
HeaderComponent.propDecorators = {
    'isSidebarLeftToggle': [{ type: Input },],
    'isSidebarRightToggle': [{ type: Input },],
    'headerLogoComponent': [{ type: ContentChild, args: [HeaderLogoComponent,] },],
    'headerLogoMiniComponent': [{ type: ContentChild, args: [HeaderLogoMiniComponent,] },],
    'headerElement': [{ type: ViewChild, args: ['headerElement',] },],
    'sidebarLeftToggleElement': [{ type: ViewChild, args: ['sidebarLeftToggleElement',] },],
    'sidebarRightToggleElement': [{ type: ViewChild, args: ['sidebarRightToggleElement',] },],
};
var HeaderModule = (function () {
    function HeaderModule() {
    }
    return HeaderModule;
}());
HeaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent],
                declarations: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent]
            },] },
];
/**
 * @nocollapse
 */
HeaderModule.ctorParameters = function () { return []; };
var CollapseAnimationDirective = (function () {
    /**
     * \@method constructor
     * @param {?} elementRef
     * @param {?} ngZone
     * @param {?} renderer2
     */
    function CollapseAnimationDirective(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        this.startEventEmitter = new EventEmitter();
        this.doneEventEmitter = new EventEmitter();
    }
    Object.defineProperty(CollapseAnimationDirective.prototype, "_isCollapsed", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.lastIsCollapsed = this.isCollapsed;
            this.isCollapsed = value;
            if (!this.firstStart) {
                this.emit('start');
                if (value) {
                    this.collapse();
                }
                else if (value === false) {
                    this.unCollapse();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@method ngOnInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngOnInit = function () {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', this.collapseAnimationDuration + "ms");
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    };
    /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngAfterContentInit = function () {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    };
    /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngOnDestroy = function () {
        if (this.listener) {
            this.listener();
        }
    };
    /**
     * [subscriptions description]
     * \@method subscriptions
     * @return {?}
     */
    CollapseAnimationDirective.prototype.subscriptions = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.listener = _this.renderer2.listen(_this.elementRef.nativeElement, 'transitionend', function () {
                if (!_this.isCollapsed) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'un-collapse');
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    _this.renderer2.setStyle(_this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame(function () {
                    _this.renderer2.removeStyle(_this.elementRef.nativeElement, 'height');
                    _this.emit('done');
                    _this.transitioning = false;
                });
            });
        });
    };
    /**
     * [unCollapse description]
     * \@method unCollapse
     * @return {?}
     */
    CollapseAnimationDirective.prototype.unCollapse = function () {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', this.elementRef.nativeElement.scrollHeight + "px");
    };
    /**
     * [collapse description]
     * \@method collapse
     * @return {?}
     */
    CollapseAnimationDirective.prototype.collapse = function () {
        var _this = this;
        requestAnimationFrame(function () {
            if (!_this.transitioning) {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', _this.elementRef.nativeElement.offsetHeight + "px");
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'collapsing');
            }
            _this.transitioning = true;
            requestAnimationFrame(function () {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', "0px");
            });
        });
    };
    /**
     * @param {?} phaseName
     * @return {?}
     */
    CollapseAnimationDirective.prototype.emit = function (phaseName) {
        var /** @type {?} */ event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'collapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    };
    return CollapseAnimationDirective;
}());
CollapseAnimationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[collapseAnimation]'
            },] },
];
/**
 * @nocollapse
 */
CollapseAnimationDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
]; };
CollapseAnimationDirective.propDecorators = {
    'collapseAnimationDuration': [{ type: Input },],
    'collapseAnimationTiming': [{ type: Input },],
    '_isCollapsed': [{ type: Input, args: ['collapseAnimation',] },],
    'startEventEmitter': [{ type: Output, args: ['collapseAnimation.start',] },],
    'doneEventEmitter': [{ type: Output, args: ['collapseAnimation.done',] },],
};
var AnimationsModule = (function () {
    function AnimationsModule() {
    }
    return AnimationsModule;
}());
AnimationsModule.decorators = [
    { type: NgModule, args: [{
                exports: [CollapseAnimationDirective],
                declarations: [CollapseAnimationDirective]
            },] },
];
/**
 * @nocollapse
 */
AnimationsModule.ctorParameters = function () { return []; };
var SidebarLeftToggleDirective = (function () {
    /**
     * \@method constructor
     * @param {?} elementRef
     */
    function SidebarLeftToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    return SidebarLeftToggleDirective;
}());
SidebarLeftToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkMenuToggle]'
            },] },
];
/**
 * @nocollapse
 */
SidebarLeftToggleDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
SidebarLeftToggleDirective.propDecorators = {
    'item': [{ type: Input, args: ['mkMenuToggle',] },],
};
var WrapperService = (function () {
    function WrapperService() {
    }
    return WrapperService;
}());
WrapperService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
WrapperService.ctorParameters = function () { return []; };
var SidebarLeftComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} layoutStore
     * @param {?} ngZone
     * @param {?} renderer2
     * @param {?} router
     * @param {?} routingService
     * @param {?} wrapperService
     * @param {?} headerService
     */
    function SidebarLeftComponent(changeDetectorRef, layoutStore, ngZone, renderer2, router$$1, routingService, wrapperService, headerService) {
        this.changeDetectorRef = changeDetectorRef;
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.router = router$$1;
        this.routingService = routingService;
        this.wrapperService = wrapperService;
        this.headerService = headerService;
        this.collapsedItems = [];
        this.activatedItems = [];
        this.toggleListeners = [];
        this.listeners = [];
        this.itemsByIds = {};
        this.runningAnimations = 0;
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(function (value) {
            _this.menu = value;
            _this.monkeyPatchMenu(_this.menu);
        }));
        this.subscriptions.push(this.routingService.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.setMenuListeners(event.url);
            }
        }));
        this.setSidebarListeners();
    };
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngAfterViewInit = function () {
        this.setMenuTogglesListeners();
        this.checkMenuWithoutChildren();
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
        this.toggleListeners = removeListeners(this.toggleListeners);
    };
    /**
     * [setSidebarListeners description]
     * \@method setSidebarListeners
     * @return {?}
     */
    SidebarLeftComponent.prototype.setSidebarListeners = function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            _this.layout = value;
            _this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe(function (value) {
            _this.windowInnerHeight = value;
            _this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(function (value) {
            _this.changeDetectorRef.detectChanges();
        }));
        this.ngZone.runOutsideAngular(function () {
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseenter', function (event) {
                _this.layoutStore.sidebarLeftMouseOver(true);
            }));
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseleave', function (event) {
                _this.layoutStore.sidebarLeftMouseOver(false);
            }));
        });
        this.subscriptions.push(this.layoutStore.windowInnerWidth.subscribe(function (value) {
            _this.windowInnerWidth = value;
            if (!_this.isSidebarLeftCollapsed && _this.windowInnerWidth <= 767) {
                _this.layoutStore.sidebarLeftCollapsed(true);
            }
            else if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed && !_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(false);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMouseOver.subscribe(function (value) {
            _this.isSidebarLeftMouseOver = value;
            if (_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(!value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftExpandOnOver.subscribe(function (value) {
            _this.isSidebarLeftExpandOnOver = value;
            if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed !== undefined) {
                _this.layoutStore.sidebarLeftCollapsed(value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe(function (value) {
            _this.isSidebarLeftCollapsed = value;
            if (_this.windowInnerWidth <= 767) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
            }
            else {
                if (_this.isSidebarLeftExpandOnOver && !_this.isSidebarLeftMouseOver && !value) {
                    _this.layoutStore.sidebarLeftExpandOnOver(false);
                }
                if (value) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
                else {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMini.subscribe(function (value) {
            if (value) {
                _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
            else {
                _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
        }));
    };
    /**
     * [setMenuListeners description]
     * \@method setMenuListeners
     * @param {?} url
     * @return {?}
     */
    SidebarLeftComponent.prototype.setMenuListeners = function (url) {
        if (url === '/') {
            this.activeItems(url);
            this.changeDetectorRef.detectChanges();
        }
        else {
            var /** @type {?} */ primaryOutlet = this.router.parseUrl(url).root.children[PRIMARY_OUTLET];
            if (primaryOutlet) {
                this.activeItems(primaryOutlet.toString());
                this.changeDetectorRef.detectChanges();
            }
        }
        if (this.windowInnerWidth <= 767 || this.isSidebarLeftExpandOnOver) {
            this.layoutStore.sidebarLeftCollapsed(true);
        }
    };
    /**
     * [getIconClasses description]
     * \@method getIconClasses
     * @param {?} item
     * @return {?}
     */
    SidebarLeftComponent.prototype.getIconClasses = function (item) {
        if (item.iconClasses || item.iconClasses === '') {
            return item.iconClasses;
        }
        else {
            return 'fa fa-circle-o';
        }
    };
    /**
     * [visibilityStateStart description]
     * \@method visibilityStateStart
     * @param {?} event
     * @return {?}
     */
    SidebarLeftComponent.prototype.visibilityStateStart = function (event) {
        var _this = this;
        this.runningAnimations++;
        this.ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this.runningAnimations--;
                if (!_this.runningAnimations) {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                }
            }, event.totalTime);
        });
    };
    /**
     * [uncollapseItemParents description]
     * \@method uncollapseItemParents
     * @param {?} item
     * @param {?=} isActive
     * @return {?}
     */
    SidebarLeftComponent.prototype.uncollapseItemParents = function (item, isActive) {
        if (isActive === void 0) { isActive = false; }
        if (isActive) {
            item.isActive = true;
        }
        item.isCollapsed = false;
        this.collapsedItems.push(item);
        if (item.parentId) {
            this.uncollapseItemParents(this.itemsByIds[item.parentId], isActive);
        }
    };
    /**
     * [findItemsByUrl description]
     * \@method findItemsByUrl
     * @param {?} url
     * @param {?} items
     * @param {?=} returnItems
     * @return {?}
     */
    SidebarLeftComponent.prototype.findItemsByUrl = function (url, items, returnItems) {
        var _this = this;
        if (returnItems === void 0) { returnItems = []; }
        items.forEach(function (item) {
            if (item.route === url) {
                returnItems.push(item);
            }
            else if (item.children) {
                _this.findItemsByUrl(url, item.children, returnItems);
            }
        });
        return returnItems;
    };
    /**
     * [activeItems description]
     * \@method activeItems
     * @param {?} url
     * @return {?}
     */
    SidebarLeftComponent.prototype.activeItems = function (url) {
        var _this = this;
        this.activatedItems.forEach(function (item) {
            item.isActive = false;
        });
        this.activatedItems = [];
        this.collapsedItems.forEach(function (item) {
            item.isActive = false;
            item.isCollapsed = true;
        });
        this.collapsedItems = [];
        var /** @type {?} */ items = this.findItemsByUrl(url, this.menu);
        items.forEach(function (item) {
            item.isActive = true;
            _this.uncollapseItemParents(item, true);
            _this.activatedItems.push(item);
        });
    };
    /**
     * [monkeyPatchMenu description]
     * \@method monkeyPatchMenu
     * @param {?} items
     * @param {?=} parentId
     * @return {?}
     */
    SidebarLeftComponent.prototype.monkeyPatchMenu = function (items, parentId) {
        var _this = this;
        items.forEach(function (item, index) {
            item.id = parentId ? Number(parentId + '' + index) : index;
            if (parentId) {
                item.parentId = parentId;
            }
            item.isCollapsed = true;
            item.isActive = false;
            if (parentId || item.children) {
                _this.itemsByIds[item.id] = item;
            }
            if (item.children) {
                _this.monkeyPatchMenu(item.children, item.id);
            }
        });
    };
    /**
     * [setMenuTogglesListeners description]
     * \@method setMenuTogglesListeners
     * @return {?}
     */
    SidebarLeftComponent.prototype.setMenuTogglesListeners = function () {
        var _this = this;
        this.toggleListeners = removeListeners(this.toggleListeners);
        this.ngZone.runOutsideAngular(function () {
            _this.sidebarLeftToggleDirectives.forEach(function (menuToggle) {
                _this.toggleListeners.push(_this.renderer2.listen(menuToggle.elementRef.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    if (menuToggle.item.isCollapsed) {
                        _this.collapsedItems.forEach(function (item) {
                            item.isCollapsed = true;
                        });
                        _this.collapsedItems = [];
                        _this.uncollapseItemParents(menuToggle.item);
                    }
                    else {
                        menuToggle.item.isCollapsed = !menuToggle.item.isCollapsed;
                    }
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    /**
     * [checkMenuWithoutChildren description]
     * \@method checkMenuWithoutChildren
     * @return {?}
     */
    SidebarLeftComponent.prototype.checkMenuWithoutChildren = function () {
        var _this = this;
        var /** @type {?} */ menuHaveChildren;
        this.menu.forEach(function (item) {
            if (item.children) {
                return menuHaveChildren = true;
            }
        });
        if (!menuHaveChildren) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                });
            });
        }
    };
    /**
     * [setSidebarHeight description]
     * \@method setSidebarHeight
     * @return {?}
     */
    SidebarLeftComponent.prototype.setSidebarHeight = function () {
        if (this.layout === 'fixed') {
            var /** @type {?} */ height = this.windowInnerHeight - this.headerService.offsetHeight;
            if (height && height !== this.sidebarHeight) {
                this.sidebarHeight = height;
                this.sidebarOverflow = 'auto';
                this.changeDetectorRef.detectChanges();
            }
        }
        else if (this.sidebarHeight) {
            this.sidebarOverflow = this.sidebarHeight = null;
            this.changeDetectorRef.detectChanges();
        }
    };
    return SidebarLeftComponent;
}());
SidebarLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-left',
                template: "\n    <aside class=\"main-sidebar\">\n      <section class=\"sidebar\" #sidebarElement [style.height.px]=\"sidebarHeight\" [style.overflow]=\"sidebarOverflow\">\n        <ng-content></ng-content>\n      \t<ul class=\"sidebar-menu\">\n          <ng-container *ngFor=\"let item of menu\">\n            <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n          </ng-container>\n      \t</ul>\n      </section>\n    </aside>\n\n    <ng-template #sidebarInner let-item=\"item\">\n      <li [class.active]=\"item.isActive\" [class.header]=\"item.separator\" [class.menu-open]=\"!item.isCollapsed\">\n        <span *ngIf=\"item.separator\">{{item.label}}</span>\n        <a *ngIf=\"!item.separator && item.route\" [routerLink]=\"item.route\">\n        \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n        \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n        \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n        \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n        \t</span>\n        </a>\n        <a *ngIf=\"!item.separator && !item.route\" href=\"#\" [mkMenuToggle]=\"item\">\n        \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n        \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n        \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n        \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n        \t</span>\n        </a>\n        <ul *ngIf=\"item.children\" [collapseAnimation]=\"item.isCollapsed\" (collapseAnimation.start)=\"visibilityStateStart($event)\" class=\"treeview-menu\">\n          <ng-container *ngFor=\"let item of item.children\">\n            <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n          </ng-container>\n        </ul>\n      </li>\n    </ng-template>\n  ",
                styles: ["\n    .main-sidebar {\n      overflow: hidden;\n    }\n\n    .treeview-menu.collapse {\n      display: none;\n    }\n\n    .treeview-menu,\n    .treeview-menu.collapse.in {\n      display: block;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
SidebarLeftComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: LayoutStore, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: Router, },
    { type: RoutingService, },
    { type: WrapperService, },
    { type: HeaderService, },
]; };
SidebarLeftComponent.propDecorators = {
    'sidebarElement': [{ type: ViewChild, args: ['sidebarElement',] },],
    'sidebarLeftToggleDirectives': [{ type: ViewChildren, args: [SidebarLeftToggleDirective,] },],
};
var SidebarLeftModule = (function () {
    function SidebarLeftModule() {
    }
    return SidebarLeftModule;
}());
SidebarLeftModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, AnimationsModule],
                exports: [SidebarLeftComponent],
                declarations: [SidebarLeftToggleDirective, SidebarLeftComponent]
            },] },
];
/**
 * @nocollapse
 */
SidebarLeftModule.ctorParameters = function () { return []; };
var SidebarRightComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     * @param {?} layoutStore
     * @param {?} sidebarRightService
     * @param {?} wrapperService
     */
    function SidebarRightComponent(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(function (value) {
            _this.isSidebarRightCollapsed = value;
            if (!value) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe(function (value) {
            _this.isSidebarRightOverContent = value;
            if (!_this.isSidebarRightCollapsed) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe(function (value) {
            if (_this.skin !== value) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, "control-sidebar-" + _this.skin);
            }
            _this.skin = value;
            _this.renderer2.addClass(_this.elementRef.nativeElement, "control-sidebar-" + value);
        }));
    };
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngAfterViewInit = function () {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnDestroy = function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    return SidebarRightComponent;
}());
SidebarRightComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-right',
                template: "\n    <div #sidebarContentElement class=\"control-sidebar-content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"control-sidebar-bg\"></div>\n  ",
                styles: ["\n    :host {\n      display: block;\n      height: 100%;\n    }\n\n    .control-sidebar-bg {\n      z-index: -1;\n    }\n\n    /deep/ .tab-content {\n      padding: 10px 15px;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
SidebarRightComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutStore, },
    { type: SidebarRightService, },
    { type: WrapperService, },
]; };
SidebarRightComponent.propDecorators = {
    'sidebarContentElement': [{ type: ViewChild, args: ['sidebarContentElement',] },],
};
var SidebarRightModule = (function () {
    function SidebarRightModule() {
    }
    return SidebarRightModule;
}());
SidebarRightModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SidebarRightComponent],
                declarations: [SidebarRightComponent]
            },] },
];
/**
 * @nocollapse
 */
SidebarRightModule.ctorParameters = function () { return []; };
var WrapperComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     * @param {?} layoutStore
     * @param {?} wrapperService
     * @param {?} ngZone
     */
    function WrapperComponent(elementRef, renderer2, layoutStore, wrapperService, ngZone) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.wrapperService = wrapperService;
        this.ngZone = ngZone;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * [ngOnInit description]
     * \@method ngOnInit
     * @return {?}
     */
    WrapperComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.layoutStore.setWindowInnerHeight(window.innerHeight);
        this.layoutStore.setWindowInnerWidth(window.innerWidth);
        this.wrapperService.wrapperElementRef = this.elementRef;
        this.subscriptions.push(this.layoutStore.wrapperClasses.subscribe(function (value) {
            _this.classes = value ? value : null;
        }));
        this.ngZone.runOutsideAngular(function () {
            _this.listeners.push(_this.renderer2.listen('window', 'resize', throttle(function () {
                _this.layoutStore.setWindowInnerHeight(window.innerHeight);
                _this.layoutStore.setWindowInnerWidth(window.innerWidth);
            }, 250)));
        });
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            value === 'fixed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'fixed') : _this.renderer2.removeClass(_this.elementRef.nativeElement, 'fixed');
            value === 'boxed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'layout-boxed') : _this.renderer2.removeClass(_this.elementRef.nativeElement, 'layout-boxed');
        }));
        this.subscriptions.push(this.layoutStore.skin.subscribe(function (value) {
            if (value) {
                if (_this.skin && _this.skin !== value) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
                }
                _this.skin = value;
                _this.renderer2.addClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
            }
        }));
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    WrapperComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
    };
    return WrapperComponent;
}());
WrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-wrapper',
                template: "\n    <div class=\"wrapper\" [ngClass]=\"classes\">\n      <ng-content></ng-content>\n    </div>\n  ",
                styles: ["\n    :host {\n      display: block;\n    }\n\n    :host /deep/ .sidebar-right-toggle > a {\n      color: #fff;\n    }\n\n    :host /deep/ .sidebar-right-toggle > a:hover {\n      background: rgba(0, 0, 0, 0.1);\n    }\n\n    :host.skin-black /deep/ .sidebar-right-toggle > a,\n    :host.skin-black-light /deep/ .sidebar-right-toggle > a {\n      color: #333;\n      border-right-width: 0;\n    }\n\n    :host.skin-black /deep/ .sidebar-right-toggle > a:hover,\n    :host.skin-black-light /deep/ .sidebar-right-toggle > a:hover {\n      background-color: #fff;\n      color: #999;\n    }\n\n    :host.skin-black /deep/ .sidebar-right-toggle > a {\n      border-left: 1px solid #eee;\n    }\n\n    :host.skin-black-light /deep/ .sidebar-right-toggle > a {\n      border-left: 1px solid #d2d6de;\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
WrapperComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutStore, },
    { type: WrapperService, },
    { type: NgZone, },
]; };
var WrapperModule = (function () {
    function WrapperModule() {
    }
    return WrapperModule;
}());
WrapperModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [WrapperComponent],
                declarations: [WrapperComponent]
            },] },
];
/**
 * @nocollapse
 */
WrapperModule.ctorParameters = function () { return []; };
var LayoutService = (function () {
    /**
     * \@method constructor
     * @param {?} routingService
     */
    function LayoutService(routingService) {
        this.routingService = routingService;
        this.isCustomLayout = new BehaviorSubject$1(true);
        this.init();
    }
    /**
     * [init description]
     * \@method init
     * @return {?}
     */
    LayoutService.prototype.init = function () {
        var _this = this;
        this.routingService.onChange.subscribe(function (value) {
            if (value && value[value.length - 1]) {
                if (_this.customLayout === undefined || _this.customLayout !== value[value.length - 1].data['disableLayout']) {
                    _this.isCustomLayout.next(!!value[value.length - 1].data['customLayout']);
                }
                _this.customLayout = value[value.length - 1].data['customLayout'];
            }
        });
    };
    return LayoutService;
}());
LayoutService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LayoutService.ctorParameters = function () { return [
    { type: RoutingService, },
]; };
/**
 * [InjectionToken description]
 */
var LayoutConfigToken = new InjectionToken('layoutConfig');
/**
 * [layoutStoreFactory description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutStoreFactory(layoutConfig) {
    return new LayoutStore(layoutConfig);
}
/**
 * [layoutProviders description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutProvider(layoutConfig) {
    return [{
            provide: LayoutStore,
            useFactory: layoutStoreFactory,
            deps: [LayoutConfigToken]
        }, {
            provide: LayoutConfigToken,
            useValue: layoutConfig
        }
    ];
}
var LayoutModule = (function () {
    /**
     * \@method constructor
     * @param {?} parentModule
     */
    function LayoutModule(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig
     * @return {?}
     */
    LayoutModule.forRoot = function (layoutConfig) {
        return {
            ngModule: LayoutModule,
            providers: layoutProvider(layoutConfig).concat([LayoutService])
        };
    };
    return LayoutModule;
}());
LayoutModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
                providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
            },] },
];
/**
 * @nocollapse
 */
LayoutModule.ctorParameters = function () { return [
    { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
var colorsAliases = [
    'default',
    'primary',
    'danger',
    'warning',
    'info',
    'success'
];
var colors = {
    'aqua': '#00c0ef',
    'aqua-active': '#00a7d0',
    'black': '#111111',
    'black-active': '#000000',
    'blue': '#0073b7',
    'blue-active': '#005384',
    'fuchsia': '#f012be',
    'fuchsia-active': '#db0ead',
    'green': '#00a65a',
    'green-active': '#008d4c',
    'gray': '#d2d6de',
    'gray-active': '#b5bbc8',
    'gray-light': '#f7f7f7',
    'light-blue': '#3c8dbc',
    'light-blue-active': '#357ca5',
    'lime': '#01ff70',
    'lime-active': '#00e765',
    'maroon': '#d81b60',
    'maroon-active': '#ca195a',
    'navy': '#001f3f',
    'navy-active': '#001a35',
    'olive': '#3d9970',
    'olive-active': '#368763',
    'orange': '#ff851b',
    'orange-active': '#ff7701',
    'purple': '#605ca8',
    'purple-active': '#555299',
    'red': '#dd4b39',
    'red-active': '#d33724',
    'teal': '#39cccc',
    'teal-active': '#30bbbb',
    'yellow': '#f39c12',
    'yellow-active': '#db8b0b',
};
var BackgroundColorDirective = (function () {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     */
    function BackgroundColorDirective(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.condition = true;
    }
    Object.defineProperty(BackgroundColorDirective.prototype, "color", {
        /**
         * @param {?} color
         * @return {?}
         */
        set: function (color) {
            if (color && this.condition) {
                this.reset();
                if (colors[color]) {
                    this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                    this.currentStyle = { property: this.property, color: colors[color] };
                    this.renderer2.setStyle(this.elementRef.nativeElement, this.property, colors[color]);
                }
                else {
                    this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                    if (color.startsWith('#') || color.startsWith('rgb')) {
                        this.currentStyle = { property: this.property, color: color };
                        this.renderer2.setStyle(this.elementRef.nativeElement, this.property, color);
                    }
                    else if (colorsAliases.indexOf(color) !== -1) {
                        this.currentClass = this.prefix + "-" + color;
                        this.renderer2.addClass(this.elementRef.nativeElement, this.currentClass);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BackgroundColorDirective.prototype.reset = function () {
        if (this.currentStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentStyle.property, this.currentStyle.color);
        }
        else if (this.currentClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentClass);
        }
    };
    return BackgroundColorDirective;
}());
BackgroundColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkColor]'
            },] },
];
/**
 * @nocollapse
 */
BackgroundColorDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
]; };
BackgroundColorDirective.propDecorators = {
    'condition': [{ type: Input, args: ['mkColorCondition',] },],
    'prefix': [{ type: Input, args: ['mkColorPrefix',] },],
    'property': [{ type: Input, args: ['mkColorProperty',] },],
    'color': [{ type: Input, args: ['mkColor',] },],
};
var ColorDirective = (function () {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     */
    function ColorDirective(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
    }
    Object.defineProperty(ColorDirective.prototype, "color", {
        /**
         * @param {?} color
         * @return {?}
         */
        set: function (color) {
            if (color) {
                this.reset();
                if (color.startsWith('#') || color.startsWith('rgb')) {
                    this.currentStyle = color;
                    this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
                }
                else {
                    this.currentClass = "text-" + color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentClass);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ColorDirective.prototype.reset = function () {
        if (this.currentStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentStyle);
        }
        else if (this.currentClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentClass);
        }
    };
    return ColorDirective;
}());
ColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkFontColor]'
            },] },
];
/**
 * @nocollapse
 */
ColorDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
]; };
ColorDirective.propDecorators = {
    'color': [{ type: Input, args: ['mkFontColor',] },],
};
var ColorModule = (function () {
    function ColorModule() {
    }
    return ColorModule;
}());
ColorModule.decorators = [
    { type: NgModule, args: [{
                exports: [BackgroundColorDirective, ColorDirective],
                declarations: [BackgroundColorDirective, ColorDirective]
            },] },
];
/**
 * @nocollapse
 */
ColorModule.ctorParameters = function () { return []; };
var AccordionToggleDirective = (function () {
    /**
     * \@method constructor
     * @param {?} elementRef
     */
    function AccordionToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    return AccordionToggleDirective;
}());
AccordionToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkAccordionToggle]'
            },] },
];
/**
 * @nocollapse
 */
AccordionToggleDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
AccordionToggleDirective.propDecorators = {
    'accordionComponent': [{ type: Input, args: ['mkAccordionToggle',] },],
};
var AccordionHeaderComponent = (function () {
    function AccordionHeaderComponent() {
    }
    return AccordionHeaderComponent;
}());
AccordionHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
AccordionHeaderComponent.ctorParameters = function () { return []; };
AccordionHeaderComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var AccordionContentComponent = (function () {
    function AccordionContentComponent() {
    }
    return AccordionContentComponent;
}());
AccordionContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-content',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
AccordionContentComponent.ctorParameters = function () { return []; };
AccordionContentComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var AccordionComponent = (function () {
    function AccordionComponent() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AccordionComponent.prototype.ngOnInit = function () {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-accordion-header" is required for component "mk-accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    return AccordionComponent;
}());
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
/**
 * @nocollapse
 */
AccordionComponent.ctorParameters = function () { return []; };
AccordionComponent.propDecorators = {
    'borderColor': [{ type: Input },],
    'contentColor': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'header': [{ type: Input },],
    'headerColor': [{ type: Input },],
    'headerColorHover': [{ type: Input },],
    'headerStyleClass': [{ type: Input },],
    'accordionHeaderComponent': [{ type: ContentChild, args: [AccordionHeaderComponent,] },],
    'accordionContentComponent': [{ type: ContentChild, args: [AccordionContentComponent,] },],
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var AccordionGroupComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} ngZone
     * @param {?} renderer2
     */
    function AccordionGroupComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        this.listeners = [];
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AccordionGroupComponent.prototype, "_activeIndex", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.activeIndex = value instanceof Array ? value : [value];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe(function (changes) {
            _this.setAccordionsIndex();
        }));
    };
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe(function (changes) {
            _this.setAccordionsToggle();
        }));
    };
    /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion
     * @return {?}
     */
    AccordionGroupComponent.prototype.headerMouseEnter = function (accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    };
    /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion
     * @return {?}
     */
    AccordionGroupComponent.prototype.headerMouseLeave = function (accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    };
    /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event
     * @param {?} toggleIndex
     * @return {?}
     */
    AccordionGroupComponent.prototype.toggleAccordion = function (event, toggleIndex) {
        event.preventDefault();
        var /** @type {?} */ indexOf = this.activeIndex['indexOf'](toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    };
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event
     * @param {?} accordion
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseStart = function (event, accordion) {
        accordion.isCollapsing = true;
        this.onCollapseStart.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event
     * @param {?} accordion
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseDone = function (event, accordion) {
        accordion.isCollapsing = false;
        this.onCollapseDone.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsIndex = function () {
        this.accordionComponents.forEach(function (accordion, index) {
            accordion.index = index;
        });
    };
    /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsToggle = function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.accordionToggleDirectives.forEach(function (accordionToggle) {
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', function (event) {
                    _this.headerMouseEnter(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', function (event) {
                    _this.headerMouseLeave(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @return {?}
     */
    AccordionGroupComponent.prototype.updateAccordionIsCollapsed = function () {
        var _this = this;
        this.accordionComponents.forEach(function (accordion, index) {
            if (_this.activeIndex.indexOf(index) === -1) {
                accordion.isCollapsed = true;
            }
            else {
                accordion.isCollapsed = false;
            }
        });
    };
    return AccordionGroupComponent;
}());
AccordionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-group',
                template: "\n    <div [ngClass]=\"styleClass\">\n      <div *ngFor=\"let accordion of accordionComponents\" class=\"panel box\" [mkColor]=\"accordion.borderColor\" mkColorProperty=\"border-top-color\" mkColorPrefix=\"box\">\n        <div [ngClass]=\"accordion.headerStyleClass\" [class.no-border]=\"accordion.isCollapsed && !accordion.isCollapsing\">\n          <h4 class=\"box-title\">\n            <a [mkAccordionToggle]=\"accordion\" href=\"#\" [mkFontColor]=\"accordion.headerStyleColor\" [class.collapsed]=\"accordion.isCollapsed\">\n              {{accordion.header}}\n              <ng-template *ngIf=\"!accordion.header\" [ngTemplateOutlet]=\"accordion.accordionTitleComponent?.templateRef\"></ng-template>\n            </a>\n          </h4>\n        </div>\n        <div class=\"panel-collapse\" [collapseAnimation]=\"accordion.isCollapsed\" (collapseAnimation.start)=\"collapseStart($event, accordion)\" (collapseAnimation.done)=\"collapseDone($event, accordion)\">\n          <div [ngClass]=\"accordion.contentStyleClass\" [mkFontColor]=\"accordion.contentColor\">\n            <ng-template [ngTemplateOutlet]=\"accordion.contentTemplateRef\"></ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
AccordionGroupComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: Renderer2, },
]; };
AccordionGroupComponent.propDecorators = {
    '_activeIndex': [{ type: Input, args: ['activeIndex',] },],
    'isMultiple': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'onCollapseStart': [{ type: Output },],
    'onCollapseDone': [{ type: Output },],
    'accordionComponents': [{ type: ContentChildren, args: [AccordionComponent,] },],
    'accordionToggleDirectives': [{ type: ViewChildren, args: [AccordionToggleDirective,] },],
};
var AccordionModule = (function () {
    function AccordionModule() {
    }
    return AccordionModule;
}());
AccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent],
                declarations: [AccordionToggleDirective, AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent]
            },] },
];
/**
 * @nocollapse
 */
AccordionModule.ctorParameters = function () { return []; };
var AlertComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} ngZone
     * @param {?} renderer2
     * @param {?} viewContainerRef
     */
    function AlertComponent(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AlertComponent.prototype, "callout", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.type = value ? 'callout' : 'alert';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertComponent.prototype, "_isDismissible", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.isDismissible = value;
            if (value) {
                this.dismissibleClass = this.type + "-dismissible";
            }
            else {
                this.dismissibleClass = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AlertComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (_this.dismissOnTimeout) {
                setTimeout(function () {
                    if (!((_this.changeDetectorRef)).destroyed) {
                        _this.remove = true;
                        _this.changeDetectorRef.detectChanges();
                    }
                }, _this.dismissOnTimeout);
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', function (event) {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
        });
    };
    /**
     * \@method ngOnDesroy
     * @return {?}
     */
    AlertComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
    };
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event
     * @return {?}
     */
    AlertComponent.prototype.collapseStart = function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event
     * @return {?}
     */
    AlertComponent.prototype.collapseDone = function (event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.onCollapseDone.emit(event);
    };
    return AlertComponent;
}());
AlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-alert',
                template: "\n    <div *ngIf=\"!removed\" [collapseAnimation]=\"remove\" (collapseAnimation.start)=\"collapseStart($event)\" (collapseAnimation.done)=\"collapseDone($event)\">\n      <div [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\" [mkColorPrefix]=\"type\" [mkFontColor]=\"color\" [ngClass]=\"[styleClass, dismissibleClass, type]\">\n        <button *ngIf=\"isDismissible\" type=\"button\" class=\"close\" #removeButtonElement>&times;</button>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  ",
                styles: ["\n    .callout-dismissable,\n    .callout-dismissible {\n      padding-right: 35px;\n    }\n\n    .callout-dismissable .close,\n    .callout-dismissible .close {\n        position: relative;\n        top: -2px;\n        right: -21px;\n        color: inherit;\n    }\n\n    .callout .close {\n      color: #000;\n      opacity: 0.2;\n      filter: alpha(opacity=20);\n    }\n\n    .callout .icon {\n      margin-right: 10px;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
AlertComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
]; };
AlertComponent.propDecorators = {
    'backgroundColor': [{ type: Input },],
    'callout': [{ type: Input },],
    'color': [{ type: Input },],
    'dismissOnTimeout': [{ type: Input },],
    '_isDismissible': [{ type: Input, args: ['isDismissible',] },],
    'styleClass': [{ type: Input },],
    'onCollapseStart': [{ type: Output },],
    'onCollapseDone': [{ type: Output },],
    'removeButtonElement': [{ type: ViewChild, args: ['removeButtonElement',] },],
    'containerElementRef': [{ type: ViewChild, args: ['containerElementRef', { read: ViewContainerRef },] },],
};
var AlertModule = (function () {
    function AlertModule() {
    }
    return AlertModule;
}());
AlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [AlertComponent],
                declarations: [AlertComponent]
            },] },
];
/**
 * @nocollapse
 */
AlertModule.ctorParameters = function () { return []; };
var BoxContentDirective = (function () {
    function BoxContentDirective() {
    }
    return BoxContentDirective;
}());
BoxContentDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-content'
            },] },
];
/**
 * @nocollapse
 */
BoxContentDirective.ctorParameters = function () { return []; };
var BoxFooterDirective = (function () {
    function BoxFooterDirective() {
    }
    return BoxFooterDirective;
}());
BoxFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-footer'
            },] },
];
/**
 * @nocollapse
 */
BoxFooterDirective.ctorParameters = function () { return []; };
var BoxToolsDirective = (function () {
    function BoxToolsDirective() {
    }
    return BoxToolsDirective;
}());
BoxToolsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-tools'
            },] },
];
/**
 * @nocollapse
 */
BoxToolsDirective.ctorParameters = function () { return []; };
var BoxHeaderDirective = (function () {
    function BoxHeaderDirective() {
    }
    return BoxHeaderDirective;
}());
BoxHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-header'
            },] },
];
/**
 * @nocollapse
 */
BoxHeaderDirective.ctorParameters = function () { return []; };
var BoxComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} ngZone
     * @param {?} renderer2
     */
    function BoxComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.remove = false;
        this.listeners = [];
        this.boxColor = 'default';
        this.buttonsStyleClass = 'btn btn-box-tool';
        this.contentStyleClass = 'box-content-wrapper';
        this.footerStyleClass = 'box-footer';
        this.headerBorder = true;
        this.headerStyleClass = 'box-header';
        this.isCollapsable = true;
        this.isCollapsed = false;
        this.isRemovable = true;
        this.isSolid = false;
        this.loadingStyleClass = 'fa fa-refresh fa-spin';
        this.styleClass = 'box';
        this.onCollapseDone = new EventEmitter();
        this.onCollapseStart = new EventEmitter();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    BoxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (_this.toggleButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.toggleButtonElement.nativeElement, 'click', function (event) {
                    _this.isCollapsed = !_this.isCollapsed;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', function (event) {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
        });
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    BoxComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
    };
    /**
     * [removedDone description]
     * \@method removedDone
     * @param {?} event
     * @return {?}
     */
    BoxComponent.prototype.removedDone = function (event) {
        if (event.toState === '1') {
            this.removed = true;
        }
    };
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event
     * @return {?}
     */
    BoxComponent.prototype.collapseStart = function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = true;
            this.onCollapseStart.emit(event);
        }
    };
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event
     * @return {?}
     */
    BoxComponent.prototype.collapseDone = function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = false;
            this.onCollapseDone.emit(event);
        }
    };
    return BoxComponent;
}());
BoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box',
                template: "\n    <div *ngIf=\"!removed\" [mkColor]=\"boxColor\" mkColorProperty=\"border-color\" mkColorPrefix=\"box\" [ngClass]=\"styleClass\" [class.collapsed-box]=\"isCollapsed && !isCollaping\" [class.box-solid]=\"isSolid\" [collapseAnimation]=\"remove\" (collapseAnimation.done)=\"removedDone($event)\">\n      <div *ngIf=\"header || boxHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkColor]=\"boxColor\" [mkColorCondition]=\"isSolid\" mkColorProperty=\"background-color\" [class.with-border]=\"headerBorder\">\n        <h3 class=\"box-title\" [mkFontColor]=\"headerColor\">\n          {{header}}\n          <ng-content select=\"mk-box-header\"></ng-content>\n        </h3>\n        <div class=\"box-tools pull-right\">\n          <ng-content select=\"mk-box-tools\"></ng-content>\n          <button *ngIf=\"isCollapsable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #toggleButtonElement>\n            <i class=\"fa\" [ngClass]=\"{'fa-plus': isCollapsed, 'fa-minus': !isCollapsed}\"></i>\n          </button>\n          <button *ngIf=\"isRemovable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #removeButtonElement>\n            <i class=\"fa fa-times\"></i>\n          </button>\n        </div>\n      </div>\n      <div [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\" [collapseAnimation]=\"isCollapsed\" (collapseAnimation.start)=\"collapseStart($event)\" (collapseAnimation.done)=\"collapseDone($event)\">\n        <div class=\"box-body\">\n          <ng-container *ngIf=\"boxHeaderDirective || boxContentDirective || boxFooterDirective || BoxToolsDirective else noDirective\">\n            <ng-content select=\"mk-box-content\"></ng-content>\n          </ng-container>\n          <ng-template #noDirective>\n            <ng-content></ng-content>\n          </ng-template>\n        </div>\n        <div *ngIf=\"footer || boxFooterDirective\" [ngClass]=\"footerSyleClass\" [mkFontColor]=\"footerColor\">\n          {{footer}}\n          <ng-content select=\"mk-box-footer\"></ng-content>\n        </div>\n      </div>\n      <div *ngIf=\"isLoading\" class=\"overlay\">\n        <i [ngClass]=\"loadingStyleClass\" [mkFontColor]=\"loadingColor\"></i>\n      </div>\n    </div>\n  ",
                styles: ["\n    .box.collapsed-box .box-body,\n    .box.collapsed-box .box-footer {\n      display: inherit;\n    }\n\n    .box-solid {\n      border: 1px solid;\n    }\n\n    .box-body {\n      background-color: #fff;\n    }\n\n    .box.box-solid.bg-color > .box-header {\n      color: #fff;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
BoxComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: Renderer2, },
]; };
BoxComponent.propDecorators = {
    'boxColor': [{ type: Input },],
    'buttonsStyleClass': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'contentColor': [{ type: Input },],
    'footer': [{ type: Input },],
    'footerColor': [{ type: Input },],
    'footerStyleClass': [{ type: Input },],
    'header': [{ type: Input },],
    'headerBorder': [{ type: Input },],
    'headerColor': [{ type: Input },],
    'headerStyleClass': [{ type: Input },],
    'isCollapsable': [{ type: Input },],
    'isCollapsed': [{ type: Input },],
    'isLoading': [{ type: Input },],
    'isRemovable': [{ type: Input },],
    'isSolid': [{ type: Input },],
    'loadingColor': [{ type: Input },],
    'loadingStyleClass': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'onCollapseDone': [{ type: Output },],
    'onCollapseStart': [{ type: Output },],
    'boxHeaderDirective': [{ type: ContentChild, args: [BoxHeaderDirective,] },],
    'boxFooterDirective': [{ type: ContentChild, args: [BoxFooterDirective,] },],
    'boxContentDirective': [{ type: ContentChild, args: [BoxContentDirective,] },],
    'boxToolsDirective': [{ type: ContentChild, args: [BoxToolsDirective,] },],
    'toggleButtonElement': [{ type: ViewChild, args: ['toggleButtonElement',] },],
    'removeButtonElement': [{ type: ViewChild, args: ['removeButtonElement',] },],
};
var BoxModule = (function () {
    function BoxModule() {
    }
    return BoxModule;
}());
BoxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective],
                declarations: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]
            },] },
];
/**
 * @nocollapse
 */
BoxModule.ctorParameters = function () { return []; };
var BoxInfoContentDirective = (function () {
    function BoxInfoContentDirective() {
    }
    return BoxInfoContentDirective;
}());
BoxInfoContentDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-info-content'
            },] },
];
/**
 * @nocollapse
 */
BoxInfoContentDirective.ctorParameters = function () { return []; };
var BoxInfoFooterDirective = (function () {
    function BoxInfoFooterDirective() {
    }
    return BoxInfoFooterDirective;
}());
BoxInfoFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-info-footer'
            },] },
];
/**
 * @nocollapse
 */
BoxInfoFooterDirective.ctorParameters = function () { return []; };
var BoxInfoHeaderDirective = (function () {
    function BoxInfoHeaderDirective() {
    }
    return BoxInfoHeaderDirective;
}());
BoxInfoHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-info-header'
            },] },
];
/**
 * @nocollapse
 */
BoxInfoHeaderDirective.ctorParameters = function () { return []; };
var BoxInfoComponent = (function () {
    function BoxInfoComponent() {
        this.contentStyleClass = 'info-box-number';
        this.footerStyleClass = 'progress-description';
        this.headerStyleClass = 'info-box-text';
        this.iconColor = '#fff';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'info-box';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    BoxInfoComponent.prototype.ngOnInit = function () {
        if (!this.backgroundColor) {
            this.progressBarBg = this.iconBackgroundColor;
        }
    };
    return BoxInfoComponent;
}());
BoxInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box-info',
                styles: ["\n    .info-box.bg-color > .info-box-content {\n      color: #fff;\n    }\n  "],
                template: "\n    <div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n      <span class=\"info-box-icon\" [mkColor]=\"iconBackgroundColor\" mkColorProperty=\"background-color\">\n        <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n      </span>\n      <div class=\"info-box-content\">\n        <span *ngIf=\"header || boxInfoHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n          {{header}}\n          <ng-content select=\"mk-box-header\"></ng-content>\n        </span>\n        <span [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n          <ng-container *ngIf=\"boxInfoHeaderDirective || boxInfoContentDirective || boxInfoFooterDirective else noDirective\">\n            <ng-content select=\"mk-box-content\"></ng-content>\n          </ng-container>\n          <ng-template #noDirective>\n            <ng-content></ng-content>\n          </ng-template>\n        </span>\n        <div *ngIf=\"progressWidth\" class=\"progress\">\n          <div class=\"progress-bar\" [mkColor]=\"progressBarBg\" mkColorProperty=\"background-color\" [style.width.%]=\"progressWidth\"></div>\n        </div>\n        <span *ngIf=\"footer || boxInfoFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n          {{footer}}\n          <ng-content select=\"mk-box-footer\"></ng-content>\n        </span>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
BoxInfoComponent.ctorParameters = function () { return []; };
BoxInfoComponent.propDecorators = {
    'backgroundColor': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'contentColor': [{ type: Input },],
    'footer': [{ type: Input },],
    'footerColor': [{ type: Input },],
    'footerStyleClass': [{ type: Input },],
    'header': [{ type: Input },],
    'headerColor': [{ type: Input },],
    'headerStyleClass': [{ type: Input },],
    'iconBackgroundColor': [{ type: Input },],
    'iconColor': [{ type: Input },],
    'iconStyleClass': [{ type: Input },],
    'progressWidth': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'boxInfoHeaderDirective': [{ type: ContentChild, args: [BoxInfoHeaderDirective,] },],
    'boxInfoFooterDirective': [{ type: ContentChild, args: [BoxInfoFooterDirective,] },],
    'boxInfoContentDirective': [{ type: ContentChild, args: [BoxInfoContentDirective,] },],
};
var BoxInfoModule = (function () {
    function BoxInfoModule() {
    }
    return BoxInfoModule;
}());
BoxInfoModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective],
                declarations: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective]
            },] },
];
/**
 * @nocollapse
 */
BoxInfoModule.ctorParameters = function () { return []; };
var BoxSmallFooterDirective = (function () {
    function BoxSmallFooterDirective() {
    }
    return BoxSmallFooterDirective;
}());
BoxSmallFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-small-footer'
            },] },
];
/**
 * @nocollapse
 */
BoxSmallFooterDirective.ctorParameters = function () { return []; };
var BoxSmallHeaderDirective = (function () {
    function BoxSmallHeaderDirective() {
    }
    return BoxSmallHeaderDirective;
}());
BoxSmallHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-small-header'
            },] },
];
/**
 * @nocollapse
 */
BoxSmallHeaderDirective.ctorParameters = function () { return []; };
var BoxSmallContentDirective = (function () {
    function BoxSmallContentDirective() {
    }
    return BoxSmallContentDirective;
}());
BoxSmallContentDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-box-small-content'
            },] },
];
/**
 * @nocollapse
 */
BoxSmallContentDirective.ctorParameters = function () { return []; };
var BoxSmallComponent = (function () {
    function BoxSmallComponent() {
        this.contentStyleClass = 'small-box-content';
        this.footerStyleClass = 'small-box-footer';
        this.headerStyleClass = 'small-box-header';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'small-box';
    }
    return BoxSmallComponent;
}());
BoxSmallComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box-small',
                template: "\n    <div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n      <div class=\"inner\">\n        <h3 *ngIf=\"header || boxSmallHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n          {{header}}\n          <ng-content select=\"mk-box-small-header\"></ng-content>\n        </h3>\n        <p [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n          <ng-container *ngIf=\"boxSmallHeaderDirective || boxSmallContentDirective || boxSmallFooterDirective else noDirective\">\n            <ng-content select=\"mk-box-small-content\"></ng-content>\n          </ng-container>\n          <ng-template #noDirective>\n            <ng-content></ng-content>\n          </ng-template>\n        </p>\n      </div>\n      <div *ngIf=\"iconStyleClass\" class=\"icon\">\n        <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n      </div>\n      <span *ngIf=\"footer || boxSmallFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n        {{footer}}\n        <ng-content select=\"mk-box-small-footer\"></ng-content>\n      </span>\n    </div>\n  ",
                styles: ["\n    .small-box.bg-color {\n      color: #fff;\n    }\n\n    /deep/ .small-box-footer:hover {\n      cursor: pointer;\n    }\n\n    /deep/ .small-box-footer a {\n      color: rgba(255,255,255,0.8);\n    }\n\n    /deep/ .small-box-footer:hover a{\n      color: rgb(255,255,255);\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
BoxSmallComponent.ctorParameters = function () { return []; };
BoxSmallComponent.propDecorators = {
    'backgroundColor': [{ type: Input },],
    'contentColor': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'footer': [{ type: Input },],
    'footerColor': [{ type: Input },],
    'footerStyleClass': [{ type: Input },],
    'header': [{ type: Input },],
    'headerColor': [{ type: Input },],
    'headerStyleClass': [{ type: Input },],
    'iconColor': [{ type: Input },],
    'iconStyleClass': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'boxSmallHeaderDirective': [{ type: ContentChild, args: [BoxSmallHeaderDirective,] },],
    'boxSmallFooterDirective': [{ type: ContentChild, args: [BoxSmallFooterDirective,] },],
    'boxSmallContentDirective': [{ type: ContentChild, args: [BoxSmallContentDirective,] },],
};
var BoxSmallModule = (function () {
    function BoxSmallModule() {
    }
    return BoxSmallModule;
}());
BoxSmallModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective],
                declarations: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective]
            },] },
];
/**
 * @nocollapse
 */
BoxSmallModule.ctorParameters = function () { return []; };
var DropdownToggleComponent = (function () {
    function DropdownToggleComponent() {
    }
    return DropdownToggleComponent;
}());
DropdownToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-toggle',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
DropdownToggleComponent.ctorParameters = function () { return []; };
DropdownToggleComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
    'toggleElement': [{ type: ContentChild, args: ['toggleElement',] },],
};
var DropdownMenuComponent = (function () {
    function DropdownMenuComponent() {
    }
    return DropdownMenuComponent;
}());
DropdownMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-menu',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
DropdownMenuComponent.ctorParameters = function () { return []; };
DropdownMenuComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var DropdownComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} ngZone
     * @param {?} renderer2
     */
    function DropdownComponent(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    DropdownComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var /** @type {?} */ toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(toggleNativeElement, 'click', function (event) {
                    _this.toggleDropdown(event);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        }
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    DropdownComponent.prototype.ngOnDestroy = function () {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    };
    /**
     * [toggle description]
     * \@method toggle
     * @param {?} event
     * @return {?}
     */
    DropdownComponent.prototype.toggleDropdown = function (event) {
        var _this = this;
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.bindDocumentClickListener();
                });
            });
        }
        else {
            this.unBindDocumentClickListener();
        }
    };
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event
     * @return {?}
     */
    DropdownComponent.prototype.collapseStart = function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event
     * @return {?}
     */
    DropdownComponent.prototype.collapseDone = function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [bindDocumentClickListener description]
     * \@method bindDocumentClickListener
     * @return {?}
     */
    DropdownComponent.prototype.bindDocumentClickListener = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.documentClickListener = _this.renderer2.listen('document', 'click', function (event) {
                if (!_this.isCollapsed) {
                    _this.isCollapsed = true;
                    _this.unBindDocumentClickListener();
                    _this.changeDetectorRef.detectChanges();
                }
            });
        });
    };
    /**
     * [unBindDocumentClickListener description]
     * \@method unBindDocumentClickListener
     * @return {?}
     */
    DropdownComponent.prototype.unBindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    return DropdownComponent;
}());
DropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown, [mk-dropdown]',
                template: "\n    <ng-template #innerTemplate>\n      <ng-container *ngIf=\"this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement else noToggleElement\" [ngTemplateOutlet]=\"dropdownToggleComponent.templateRef\"></ng-container>\n      <ng-template #noToggleElement>\n        <button *ngIf=\"toggleText || dropdownToggleComponent\" [mkColor]=\"buttonBackgroudColor\" mkColorProperty=\"background-color\" mkColorPrefix=\"btn\" [ngClass]=\"buttonStyleClass\" #toggleElement>\n          {{toggleText}}\n          <ng-container [ngTemplateOutlet]=\"dropdownToggleComponent?.templateRef\"></ng-container>\n        </button>\n      </ng-template>\n      <ul [ngClass]=\"contentStyleClass\" [collapseAnimation]=\"isCollapsed\" (collapseAnimation.start)=\"collapseStart($event)\" (collapseAnimation.done)=\"collapseDone($event)\">\n        <ng-container *ngIf=\"dropdownMenuComponent else noDropdownMenuComponent\" [ngTemplateOutlet]=\"dropdownMenuComponent.templateRef\"></ng-container>\n        <ng-template #noDropdownMenuComponent>\n          <ng-content></ng-content>\n        </ng-template>\n      </ul>\n    </ng-template>\n\n    <div *ngIf=\"isWrapper else noWrapper\" [ngClass]=\"styleClass\">\n      <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n    </div>\n\n    <ng-template #noWrapper>\n      <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n    </ng-template>\n  ",
                styles: ["\n    .dropdown-menu {\n      display: block;\n    }\n\n    .dropdown-menu.collapsing:not(.un-collapse) {\n      -webkit-transition-property: height, padding-top, padding-bottom;\n      transition-property: height, padding-top, padding-bottom;\n      padding-top: 0;\n      padding-bottom: 0;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
DropdownComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
]; };
DropdownComponent.propDecorators = {
    'buttonStyleClass': [{ type: Input },],
    'buttonBackgroudColor': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'isCollapsed': [{ type: Input },],
    'isWrapper': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'toggleElement': [{ type: Input },],
    'toggleText': [{ type: Input },],
    'onCollapseStart': [{ type: Output },],
    'onCollapseDone': [{ type: Output },],
    'dropdownToggleComponent': [{ type: ContentChild, args: [DropdownToggleComponent,] },],
    'dropdownMenuComponent': [{ type: ContentChild, args: [DropdownMenuComponent,] },],
    'defaultToggleElement': [{ type: ViewChild, args: ['toggleElement',] },],
};
var DropdownModule = (function () {
    function DropdownModule() {
    }
    return DropdownModule;
}());
DropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent],
                declarations: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent]
            },] },
];
/**
 * @nocollapse
 */
DropdownModule.ctorParameters = function () { return []; };
var InputTextLabelDirective = (function () {
    function InputTextLabelDirective() {
    }
    return InputTextLabelDirective;
}());
InputTextLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-input-text-label'
            },] },
];
/**
 * @nocollapse
 */
InputTextLabelDirective.ctorParameters = function () { return []; };
var InputTextAddonLeftDirective = (function () {
    function InputTextAddonLeftDirective() {
    }
    return InputTextAddonLeftDirective;
}());
InputTextAddonLeftDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-input-text-addon-left'
            },] },
];
/**
 * @nocollapse
 */
InputTextAddonLeftDirective.ctorParameters = function () { return []; };
var InputTextAddonRightDirective = (function () {
    function InputTextAddonRightDirective() {
    }
    return InputTextAddonRightDirective;
}());
InputTextAddonRightDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mk-input-text-addon-right'
            },] },
];
/**
 * @nocollapse
 */
InputTextAddonRightDirective.ctorParameters = function () { return []; };
var InputTextComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} renderer2
     */
    function InputTextComponent(changeDetectorRef, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.id = new Date().valueOf();
        this.wrapperClasses = 'form-group';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    InputTextComponent.prototype.ngOnInit = function () {
        var _this = this;
        //this.ngZone.runOutsideAngular(() => { #BUG
        this.listeners.push(this.renderer2.listen(this.inputElement.nativeElement, 'input', function (event) {
            _this.onChange(((event.target)).value);
            _this.changeDetectorRef.detectChanges();
        }));
        this.listeners.push(this.renderer2.listen(this.inputElement.nativeElement, 'blur', function (event) {
            _this.onTouched();
            _this.changeDetectorRef.detectChanges();
        }));
        //});
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    InputTextComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
    };
    /**
     * [registerOnChange description]
     * \@method registerOnChange
     * @param {?} fn
     * @return {?}
     */
    InputTextComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * [registerOnTouched description]
     * \@method registerOnTouched
     * @param {?} fn
     * @return {?}
     */
    InputTextComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * [setDisabledState description]
     * \@method setDisabledState
     * @param {?} isDisabled
     * @return {?}
     */
    InputTextComponent.prototype.setDisabledState = function (isDisabled) {
        this.renderer2.setProperty(this.inputElement.nativeElement, 'disabled', isDisabled);
    };
    /**
     * [writeValue description]
     * \@method writeValue
     * @param {?} value
     * @return {?}
     */
    InputTextComponent.prototype.writeValue = function (value) {
        if (value) {
            this.value = value;
        }
    };
    return InputTextComponent;
}());
InputTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-input-text',
                template: "\n    <div [ngClass]=\"wrapperClasses\" [mkColor]=\"inputColor\" mkColorPrefix=\"has\">\n      <label *ngIf=\"addonLeft || inputTextLabelDirective\" for=\"{{id}}\">\n        {{label}}\n        <ng-content select=\"mk-input-text-label\"></ng-content>\n      </label>\n      <div class=\"input-group\">\n        <span *ngIf=\"addonLeft || inputTextAddonLeftDirective\" class=\"input-group-addon\" [mkColor]=\"inputColor\" mkColorProperty=\"border-color\">\n          {{addonLeft}}\n          <ng-content select=\"mk-input-text-addon-left\"></ng-content>\n        </span>\n        <input #inputElement type=\"text\" class=\"form-control\" [ngClass]=\"size === 'small' ? 'input-sm' : size === 'large' ? 'input-lg': ''\" id=\"{{id}}\" placeholder=\"{{placeholder}}\" [(ngModel)]=\"value\" [disabled]=\"isDisabled\" [mkColor]=\"inputColor\" mkColorProperty=\"border-color\" [mkFontColor]=\"inputFontColor\">\n        <span *ngIf=\"addonRight || inputTextAddonRightDirective\" class=\"input-group-addon\" [mkColor]=\"inputColor\" mkColorProperty=\"border-color\">\n          {{addonRight}}\n          <ng-content select=\"mk-input-text-addon-right\"></ng-content>\n        </span>\n      </div>\n    </div>\n  ",
                styles: ["\n\n  "],
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return InputTextComponent; }),
                        multi: true
                    }]
            },] },
];
/**
 * @nocollapse
 */
InputTextComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: Renderer2, },
]; };
InputTextComponent.propDecorators = {
    'addonLeft': [{ type: Input },],
    'addonRight': [{ type: Input },],
    'id': [{ type: Input },],
    'inputColor': [{ type: Input },],
    'inputFontColor': [{ type: Input },],
    'isDisabled': [{ type: Input },],
    'label': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'size': [{ type: Input },],
    'wrapperClasses': [{ type: Input },],
    'inputElement': [{ type: ViewChild, args: ['inputElement',] },],
    'inputTextLabelDirective': [{ type: ContentChild, args: [InputTextLabelDirective,] },],
    'inputTextAddonLeftDirective': [{ type: ContentChild, args: [InputTextAddonLeftDirective,] },],
    'inputTextAddonRightDirective': [{ type: ContentChild, args: [InputTextAddonRightDirective,] },],
};
var InputTextModule = (function () {
    function InputTextModule() {
    }
    return InputTextModule;
}());
InputTextModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ColorModule,
                    FormsModule
                ],
                exports: [InputTextComponent, InputTextLabelDirective, InputTextAddonLeftDirective, InputTextAddonRightDirective],
                declarations: [InputTextComponent, InputTextLabelDirective, InputTextAddonLeftDirective, InputTextAddonRightDirective]
            },] },
];
/**
 * @nocollapse
 */
InputTextModule.ctorParameters = function () { return []; };
var TabToggleDirective = (function () {
    /**
     * \@method constructor
     * @param {?} elementRef
     */
    function TabToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    return TabToggleDirective;
}());
TabToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkTabToggle]'
            },] },
];
/**
 * @nocollapse
 */
TabToggleDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
TabToggleDirective.propDecorators = {
    'tabComponent': [{ type: Input, args: ['mkTabToggle',] },],
};
var TabHeaderComponent = (function () {
    function TabHeaderComponent() {
    }
    return TabHeaderComponent;
}());
TabHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
TabHeaderComponent.ctorParameters = function () { return []; };
TabHeaderComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var TabContentComponent = (function () {
    function TabContentComponent() {
    }
    return TabContentComponent;
}());
TabContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab-content',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
TabContentComponent.ctorParameters = function () { return []; };
TabContentComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var TabComponent = (function () {
    function TabComponent() {
        this.isActive = false;
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = function () {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    return TabComponent;
}());
TabComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
TabComponent.ctorParameters = function () { return []; };
TabComponent.propDecorators = {
    'header': [{ type: Input },],
    'isDisabled': [{ type: Input },],
    'tabColor': [{ type: Input },],
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
    'tabHeaderComponent': [{ type: ContentChild, args: [TabHeaderComponent,] },],
    'tabContentComponent': [{ type: ContentChild, args: [TabContentComponent,] },],
};
var TabsHeaderComponent = (function () {
    function TabsHeaderComponent() {
    }
    return TabsHeaderComponent;
}());
TabsHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tabs-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
TabsHeaderComponent.ctorParameters = function () { return []; };
TabsHeaderComponent.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ['templateRef',] },],
};
var TabsComponent = (function () {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef
     * @param {?} ngZone
     * @param {?} renderer2
     */
    function TabsComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.onClose = new EventEmitter();
        this.onOpen = new EventEmitter();
    }
    Object.defineProperty(TabsComponent.prototype, "activeTabIndex", {
        /**
         * @return {?}
         */
        get: function () {
            return this.activatedTabIndex;
        },
        /**
         * @param {?} index
         * @return {?}
         */
        set: function (index) {
            this.activatedTabIndex = index;
            this.changeDetectorRef.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe(function (changes) {
            _this.setTabIndex();
        }));
        // Open tab on load.
        this.openTabIndex();
    };
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe(function (changes) {
            _this.setTabsToggle();
        }));
    };
    /**
     * \@method ngOnChanges
     * @param {?} changes
     * @return {?}
     */
    TabsComponent.prototype.ngOnChanges = function (changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    };
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    TabsComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    TabsComponent.prototype.openTabIndex = function () {
        var _this = this;
        if (this.tabs) {
            this.tabs.forEach(function (tab) {
                if (_this.activatedTabIndex === tab.index || tab.index === 0 && typeof _this.activatedTabIndex !== 'number') {
                    tab.isActive = true;
                    _this.onOpen.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    _this.onClose.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
            });
        }
    };
    /**
     * [openTab description]
     * \@method openTab
     * @param {?} event
     * @param {?} tabToOpen
     * @return {?}
     */
    TabsComponent.prototype.openTab = function (event, tabToOpen) {
        var _this = this;
        event.preventDefault();
        tabToOpen.isActive = true;
        this.onOpen.emit({ event: event, index: tabToOpen.index });
        this.tabs.forEach(function (tab) {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                _this.onClose.emit({ event: event, index: tab.index });
            }
        });
    };
    /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @return {?}
     */
    TabsComponent.prototype.setTabIndex = function () {
        this.tabs.forEach(function (tab, index) {
            tab.index = index;
        });
        this.changeDetectorRef.detectChanges();
    };
    /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @return {?}
     */
    TabsComponent.prototype.setTabsToggle = function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.tabToggleDirectives.forEach(function (tabToggle) {
                _this.listeners.push(_this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.openTab(event, tabToggle.tabComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    return TabsComponent;
}());
TabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tabs',
                template: "\n    <div [ngClass]=\"styleClass\">\n      <ul [ngClass]=\"navStyleClass\" [class.pull-right]=\"header || tabsHeaderComponent\">\n        <li *ngFor=\"let tab of tabs\" [class.active]=\"tab.isActive\" [mkColor]=\"tab.tabColor || tabsColor\" mkColorProperty=\"border-top-color\">\n          <a *ngIf=\"!tab.isDisabled\" [mkTabToggle]=\"tab\" href=\"#\">\n            {{tab.header}}\n            <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent?.templateRef\"></ng-template>\n          </a>\n          <ng-template [ngIf]=\"tab.isDisabled\">\n            {{tab.header}}\n            <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent.templateRef\"></ng-template>\n          </ng-template>\n        </li>\n        <li *ngIf=\"tabsHeaderComponent || header\" [ngClass]=\"headerStyleClass\">\n          {{header}}\n          <ng-template *ngIf=\"!header\" [ngTemplateOutlet]=\"tabsHeaderComponent.templateRef\"></ng-template>\n        </li>\n      </ul>\n      <div [ngClass]=\"contentStyleClass\">\n        <div *ngFor=\"let tab of tabs\" class=\"tab-pane\" [class.active]=\"tab.isActive\">\n          <ng-template [ngTemplateOutlet]=\"tab.contentTemplateRef\"></ng-template>\n        </div>\n      </div>\n    </div>\n  ",
                styles: ["\n    .nav-tabs-custom > .nav-tabs > li {\n      border-top-width: 0;\n    }\n\n    .nav-tabs-custom > .nav-tabs > li.active {\n      border-top-width: 3px;\n    }\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
TabsComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: Renderer2, },
]; };
TabsComponent.propDecorators = {
    'activeTabIndex': [{ type: Input },],
    'header': [{ type: Input },],
    'headerStyleClass': [{ type: Input },],
    'navStyleClass': [{ type: Input },],
    'contentStyleClass': [{ type: Input },],
    'styleClass': [{ type: Input },],
    'tabsColor': [{ type: Input },],
    'onClose': [{ type: Output },],
    'onOpen': [{ type: Output },],
    'tabsHeaderComponent': [{ type: ContentChild, args: [TabsHeaderComponent,] },],
    'tabs': [{ type: ContentChildren, args: [TabComponent,] },],
    'tabToggleDirectives': [{ type: ViewChildren, args: [TabToggleDirective,] },],
};
var TabsModule = (function () {
    function TabsModule() {
    }
    return TabsModule;
}());
TabsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent],
                declarations: [TabToggleDirective, TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent]
            },] },
];
/**
 * @nocollapse
 */
TabsModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { LayoutModule, LayoutService, LayoutStore, AccordionModule, AlertModule, BoxModule, BoxInfoModule, BoxSmallModule, BreadcrumbsModule, DropdownModule, InputTextModule, TabsModule, AccordionComponent as ɵbh, AccordionContentComponent as ɵbg, AccordionGroupComponent as ɵbi, AccordionHeaderComponent as ɵbf, AccordionToggleDirective as ɵbj, AlertComponent as ɵbk, CollapseAnimationDirective as ɵr, AnimationsModule as ɵq, BoxInfoComponent as ɵbq, BoxInfoContentDirective as ɵbr, BoxInfoFooterDirective as ɵbs, BoxInfoHeaderDirective as ɵbt, BoxSmallComponent as ɵbu, BoxSmallContentDirective as ɵbx, BoxSmallFooterDirective as ɵbv, BoxSmallHeaderDirective as ɵbw, BoxComponent as ɵbl, BoxContentDirective as ɵbm, BoxFooterDirective as ɵbn, BoxHeaderDirective as ɵbp, BoxToolsDirective as ɵbo, BreadcrumbsComponent as ɵb, BackgroundColorDirective as ɵbd, ColorDirective as ɵbe, ColorModule as ɵbc, DropdownComponent as ɵca, DropdownMenuComponent as ɵbz, DropdownToggleComponent as ɵby, InputTextComponent as ɵcb, InputTextAddonLeftDirective as ɵcd, InputTextAddonRightDirective as ɵce, InputTextLabelDirective as ɵcc, ContentComponent as ɵd, ContentModule as ɵa, FooterComponent as ɵk, FooterLeftComponent as ɵi, FooterRightComponent as ɵj, FooterModule as ɵh, FooterService as ɵg, HeaderComponent as ɵo, HeaderLogoComponent as ɵm, HeaderLogoMiniComponent as ɵn, HeaderModule as ɵl, HeaderService as ɵf, LayoutConfigToken as ɵz, layoutProvider as ɵbb, layoutStoreFactory as ɵba, SidebarLeftComponent as ɵs, SidebarLeftToggleDirective as ɵt, SidebarLeftModule as ɵp, SidebarRightComponent as ɵw, SidebarRightModule as ɵv, SidebarRightService as ɵe, WrapperComponent as ɵy, WrapperModule as ɵx, WrapperService as ɵu, RoutingService as ɵc, TabComponent as ɵch, TabContentComponent as ɵcg, TabHeaderComponent as ɵcf, TabsComponent as ɵcj, TabsHeaderComponent as ɵci, TabToggleDirective as ɵck };
//# sourceMappingURL=angular-admin-lte.es5.js.map
