import { ElementRef, OnInit, Renderer2, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { InputTextLabelDirective, InputTextAddonLeftDirective, InputTextAddonRightDirective } from './input-text.directive';
export declare class InputTextComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private changeDetectorRef;
    private renderer2;
    value: any;
    private listeners;
    private onChange;
    private onTouched;
    addonLeft: string;
    addonRight: string;
    id: string | number;
    inputColor: string;
    inputFontColor: string;
    isDisabled: boolean;
    label: string;
    placeholder: string;
    size: string;
    wrapperClasses: string;
    inputElement: ElementRef;
    inputTextLabelDirective: InputTextLabelDirective;
    inputTextAddonLeftDirective: InputTextAddonLeftDirective;
    inputTextAddonRightDirective: InputTextAddonRightDirective;
    /**
     * @method constructor
     * @param  {Renderer2} privaterenderer2 [description]
     */
    constructor(changeDetectorRef: ChangeDetectorRef, renderer2: Renderer2);
    /**
     * @method ngOnInit
     */
    ngOnInit(): void;
    /**
     * @method ngOnDestroy
     */
    ngOnDestroy(): void;
    /**
     * [registerOnChange description]
     * @method registerOnChange
     * @param  {Function}       fn [description]
     */
    registerOnChange(fn: Function): void;
    /**
     * [registerOnTouched description]
     * @method registerOnTouched
     * @param  {Function}        fn [description]
     */
    registerOnTouched(fn: Function): void;
    /**
     * [setDisabledState description]
     * @method setDisabledState
     * @param  {boolean}        isDisabled [description]
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * [writeValue description]
     * @method writeValue
     * @param  {any} value [description]
     */
    writeValue(value: any): void;
}
